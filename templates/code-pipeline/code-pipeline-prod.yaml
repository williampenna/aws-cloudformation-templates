AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Code Pipeline template'
Parameters:
  BranchName:
    Description: CodeCommit branch name
    Type: String
  RepositoryName:
    Description: CodeComit repository name
    Type: String
  ClusterName:
    Type: String
    Description: Cluster Name which the service belongs
  ServiceName:
    Type: String
    Description: Name of the service to be deployed
  Stage:
    Type: String
    Description: Environment Stage which template will be deployed
  ProjectTag:
    Type: String
    Description: Tag of the project name
  AreaTag:
    Type: String
    Description: Tag of the area for the corresponding service
  Microservice:
    Type: String
    Description: Microservice which the service belongs
  MicroserviceTag:
    Type: String
    Description: Microservice Tag
  RepositoryUri:
    Type: String
    Description: Uri from ECR repository
  Region:
    Type: String
    Description: AWS Region
  SecretsManagerGeneralRole:
    Type: String
    Description: Secrets Manager General Role
  VpcId:
    Type: String
    Description: ID of the VPC
  SubnetId:
    Type: String
    Description: ID of the private subnet
  SecurityGroupId:
    Type: String
    Description: ID of the security group
  CodePipelineArtifactStoreDestinyBucket:
    Type: String
  RdsExecutionProjectName:
    Type: String

Resources:
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub code-pipeline-artifact-${Stage}-${RepositoryName}-us-east-2
      Tags:
        - Key: projeto
          Value: !Ref ProjectTag
        - Key: area
          Value: !Ref AreaTag
        - Key: ambiente
          Value: !Ref Stage
        - Key: servico-aws
          Value: bucket-para-pipeline
        - Key: microsservico
          Value: !Ref MicroserviceTag

  AmazonCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref AppPipeline
  AmazonCloudWatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: !Sub CodeCommitPipelineRule-${Stage}-${RepositoryName}
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Join 
            - ''
            - - 'arn:aws:codecommit:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref RepositoryName
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref BranchName
      Targets:
        - Arn: !Join 
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref AppPipeline
          RoleArn: !GetAtt 
            - AmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-AppPipeline
  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub ${Stage}-${Microservice}-pipeline
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStores:
        - Region: us-east-2
          ArtifactStore:
            Location: !Ref CodePipelineArtifactStoreBucket
            Type: S3
        - Region: sa-east-1
          ArtifactStore:
            Location: !Ref CodePipelineArtifactStoreDestinyBucket
            Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref BuildProject
            RunOrder: 1
            InputArtifacts:
              - Name: SourceOutput
            OutputArtifacts:
              - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              Region: sa-east-1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ClusterName
                ServiceName: !Ref ServiceName
              RunOrder: 3
        - Name: RdsExecution
          Actions:
          - Name: RdsExecution
            Region: sa-east-1
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref RdsExecutionProjectName
            InputArtifacts:
              - Name: SourceOutput
            OutputArtifacts:
              - Name: RdsBuildOutput
            RunOrder: 4
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CodePipelinePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            - arn:aws:s3:::elasticbeanstalk*
            Effect: Allow
          - Action:
            - codebuild:*
            Resource: "*"
            Effect: Allow
          - Action:
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - sqs:*
            - iam:PassRole
            - codecommit:*
            - codedeploy:*
            - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Stage}-${Microservice}-CodeBuildPipeline
      Description: !Sub 'CodeBuild for service: ${Microservice}'
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image:  aws/codebuild/standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_IMAGE_URI
            Type: PLAINTEXT
            Value: !Ref RepositoryUri
          - Name: SERVICE_NAME
            Type: PLAINTEXT
            Value: !Ref ServiceName
          - Name: REGION
            Type: PLAINTEXT
            Value: sa-east-1
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - npm install
                - npm i npm@latest -g
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws --version
                - $(aws ecr get-login --region $REGION --no-include-email)
                - REPOSITORY_URI=$ECR_IMAGE_URI
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:latest .
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push $REPOSITORY_URI:latest
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - echo Writing image definitions file...
                - printf '[{"name":"%s","imageUri":"%s"}]' $SERVICE_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
          artifacts:
              files: imagedefinitions.json
      Tags:
        - Key: projeto
          Value: !Ref ProjectTag
        - Key: area
          Value: !Ref AreaTag
        - Key: ambiente
          Value: !Ref Stage
        - Key: servico-aws
          Value: bucket-for-pipeline
        - Key: microsservico
          Value: !Ref MicroserviceTag

  BuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Stage}-${Microservice}-CodeBuildRole-pipe
      Policies:
        - PolicyName: CodeBuildRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'ec2:*'
                  - 's3:*'
                  - 'codepipeline:*'
                  - 'codebuild:*'
                  - 'iam:*'
                  - 'elasticloadbalancing:*'
                  - 'logs:*'
                  - 'ecs:*'
                  - 'ecr:*'
                  - 'apigateway:*'
                  - 'ssm:*'
                  - 'SNS:*'
                  - 'ses:*'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'secretsmanager:GetSecretValue'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'dynamodb:GetItem'
                Effect: Allow
                Resource: !Sub 'arn:aws:dynamodb:${Region}:${AWS::AccountId}:table/${Stage}_notificacao_template'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  BuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${Stage}-${Microservice}-CodeBuildPolicy-pipe
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
              - s3:GetObject
              - s3:ListBucket
              - ssm:*
            Resource:
              - !Sub 'arn:aws:s3:::*'
              - !Sub 'arn:aws:s3:::*'

          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: '*'
      Roles:
        -
          !Ref BuildProjectRole
